#version 330 core

// Interpolated values from the vertex shaders
in vec3 Position_worldspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 Normal_cameraspace;

in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;
in vec4 clipSpace;
in vec2 textureCoords;

// Ouput data
layout(location = 0) out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D ReflectionTextureSampler;
uniform sampler2D RefractionTextureSampler;
uniform sampler2D dudvMap;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform vec3 LightPosition_worldspace;
uniform bool use_normals;

uniform float moveFactor;
const float waveStrength = 0.02;

void main(){
  vec2 ndc = ((clipSpace.xy / clipSpace.w) / 2.0) + 0.5;
  vec2 refractionTexCoords = vec2(ndc.x, ndc.y);
  vec2 reflectionTexCoords = vec2(1.0 - ndc.x, ndc.y);

  vec2 distortion1 = (texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg * 2.0 - 1.0) * waveStrength;
  vec2 distortion2 = (texture(dudvMap, vec2(-textureCoords.x + moveFactor, textureCoords.y + moveFactor)).rg * 2.0 - 1.0) * waveStrength;
  vec2 totalDistortion = distortion1 + distortion2;

  reflectionTexCoords += totalDistortion;
  refractionTexCoords += totalDistortion;

  reflectionTexCoords.x = clamp(reflectionTexCoords.x, 0.001, 0.999);
  // reflectionTexCoords.y = clamp(reflectionTexCoords.y, 0.001, 0.999);
  refractionTexCoords = clamp(refractionTexCoords, 0.001, 0.999);

  vec3 ReflectionColor = texture( ReflectionTextureSampler, reflectionTexCoords ).rgb;
  vec3 RefractionColor = texture( RefractionTextureSampler, refractionTexCoords ).rgb;

  color = mix(ReflectionColor, RefractionColor, 0.5) + vec3(0, 0.05, 0.05);
}
