#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;
layout(location = 3) in vec3 vertexTangent_modelspace;
layout(location = 4) in vec3 vertexBitangent_modelspace;

// Output data ; will be interpolated for each fragment.
out vec3 Position_worldspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 Normal_cameraspace;

out vec3 LightDirection_tangentspace;
out vec3 EyeDirection_tangentspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform vec3 LightPosition_worldspace;

uniform vec4 plane;
out vec4 clipSpace;
out vec2 textureCoords;

const float tiling = 6.0;

void main(){
  // Position of the vertex, in worldspace : M * position
  Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;
  
  gl_ClipDistance[0] = dot(vec4(Position_worldspace, 1.0), plane);
  
  // Output position of the vertex, in clip space : MVP * position
  clipSpace = MVP * vec4(vertexPosition_modelspace,1);
  gl_Position = clipSpace;

  textureCoords = vec2(vertexUV.x/2.0 + 0.5, vertexUV.y/2.0 + 0.5) * tiling;
}
