#version 330 core

in FragData {
  vec2 UV;
  vec3 barycentric;
  vec3 color_magna;
  vec3 normal_cameraspace;
} in_data;

// Output data
layout(location = 0) out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D DiffuseTextureSampler;
uniform sampler2D NormalTextureSampler;
uniform sampler2D SpecularTextureSampler;
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;

void main(){
  // if (any(lessThan(in_data.barycentric, vec3(0.02)))){
  //   color = vec3(0.0, 0.0, 0.0);
  // } else{
  //   // color = in_data.barycentric;
  //   color = vec3(0.5, 0.5, 0.5);
  // }
  // color = 0.8 * color_magna + 0.2 * color;
  // color = color_magna;

  // Material properties
  vec3 diffuse_color = texture(DiffuseTextureSampler, in_data.UV).rgb;
  vec3 ambient_color = vec3(0.3, 0.3, 0.3) * diffuse_color;
  // vec3 MaterialSpecularColor = texture(SpecularTextureSampler, in_data.UV).rgb * 0.3;
  
  vec3 light_color = vec3(1, 1, 1);
  float light_power = 1.0;

  vec4 light_direction = vec4(1, 1, 0, 0);
  vec3 light_cameraspace = (V * M * light_direction).xyz;

  vec3 n = normalize(in_data.normal_cameraspace);
  vec3 l = normalize(light_cameraspace);
  float cos_theta = clamp(dot(n, l), 0, 1);
  // color = ambient_color + diffuse_color * light_color * light_power * cos_theta;
  color = ambient_color + diffuse_color * light_color * (cos_theta - 0.5) * 2;
}
