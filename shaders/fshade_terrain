#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Normal_cameraspace;
in vec3 color_magna;
in vec3 LightDirection_cameraspace;

// Output data
layout(location = 0) out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D DiffuseTextureSampler;
uniform sampler2D NormalTextureSampler;
uniform sampler2D SpecularTextureSampler;

void main(){
  // Light emission properties.
  vec3 LightColor = vec3(1, 1, 1);
  float LightPower = 1.0;
  
  // Material properties
  vec3 MaterialDiffuseColor = texture(DiffuseTextureSampler, UV).rgb;
  vec3 MaterialAmbientColor = vec3(0.5, 0.5, 0.5) * MaterialDiffuseColor;
  vec3 MaterialSpecularColor = texture(SpecularTextureSampler, UV).rgb * 0.3;
  
  // Normal of the computed fragment, in camera space
  vec3 n = normalize(Normal_cameraspace);
  
  // Direction of the light (from the fragment to the light)
  // vec3 l = normalize(vec3(0, 1, 0));
  vec3 l = normalize( LightDirection_cameraspace );
  
  // Cosine of the angle between the normal and the light direction, 
  // clamped above 0.
  float cosTheta = clamp(dot(n, l), 0, 1);
 
  // color = MaterialAmbientColor + MaterialDiffuseColor * LightColor * LightPower * cosTheta;
  color = color_magna;
}
