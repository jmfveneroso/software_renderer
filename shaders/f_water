#version 330 core

in FragData {
  vec3 position;
  vec2 UV;
  vec3 to_camera_vector;
  vec3 from_light_vector;
  vec4 clipSpace;
} in_data;

// Output data
layout(location = 0) out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;

uniform float moveFactor;
const float waveStrength = 0.03;
const float shineDamper = 2.0;
const float reflectivity = 0.5;

void main(){
  vec2 UV = in_data.UV;
  vec2 distortedTexCoords = 0.5 * texture(dudvMap, vec2(UV.x + moveFactor, UV.y)).rg;
  distortedTexCoords += 0.5 * texture(dudvMap, vec2((0.5 * UV.x + 1000) + moveFactor, 0.5 * (UV.y + 1000))).rg;
  distortedTexCoords = UV + vec2(distortedTexCoords.x, distortedTexCoords.y + moveFactor);

  vec3 normalMapColor = texture(normalMap, distortedTexCoords).rgb;
  vec3 normal = vec3(normalMapColor.r * 2.0 - 1.0, 1.5 * (normalMapColor.b * 2.0 - 1.0), normalMapColor.g * 2.0 - 1.0);
  normal = normalize(normal);

  vec3 viewVector = normalize(in_data.to_camera_vector);
  vec3 LightColor = vec3(1,1,1);
  vec3 from_light = normalize(vec3(-1, -1, 0));
  vec3 reflectedLight = reflect(from_light, normal);
  float specular = dot(reflectedLight, viewVector);
  specular = pow(specular, shineDamper);
  vec3 specularHighlights = LightColor * specular * reflectivity;

  color = vec4(0, 0.3, 0.5, 1.0) + vec4(specularHighlights, 1.0);
}
