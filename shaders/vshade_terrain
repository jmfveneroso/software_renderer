#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexBarycentric;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 vBC;
out vec3 Normal_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 color_magna;
out vec3 normal_cameraspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform sampler2DRect NormalsSampler;
uniform sampler2DRect HeightMapSampler;
uniform sampler2DRect ValidSampler;
uniform ivec2 PlayerPosition;
uniform ivec2 buffer_top_left;
uniform int TILE_SIZE;
uniform int CLIPMAP_SIZE;

void main(){
  // Output position of the vertex, in clip space : MVP * position
  vec3 position = vertexPosition_modelspace;

  float valid = texelFetch(ValidSampler, ivec2(position.x, position.z)).r;

  ivec2 toroidal_coords = ivec2(position.x, position.z);
  ivec2 buffer_coords = (toroidal_coords + buffer_top_left + CLIPMAP_SIZE + 1) % (CLIPMAP_SIZE + 1);
  float height = -2000 + 4000 * texelFetch(HeightMapSampler, buffer_coords).r;
  vec3 normal = texelFetch(NormalsSampler, buffer_coords).rgb * 2 - 1;

  position.x *= TILE_SIZE;
  position.z *= TILE_SIZE;
  position.y = height;

  gl_Position = MVP * vec4(position, 1);
  
  // UV of the vertex. No special space for this one.
  UV = vertexUV; 

  vBC = vertexBarycentric;

  // color_magna = vec3(valid, 0, 0);
  color_magna = normal;

  normal_cameraspace = (V * M * vec4(normal, 0)).xyz; 
}
