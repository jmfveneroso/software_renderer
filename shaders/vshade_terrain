#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexBarycentric;
layout(location = 3) in float vertexHeight;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 vBC;
out vec3 Normal_cameraspace;
out vec3 LightDirection_cameraspace;
out vec3 color_magna;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform sampler2D HeightMapSampler;
uniform ivec2 PlayerPosition;
uniform ivec3 buffer_top_left;
uniform int TILE_SIZE;
uniform int CLIPMAP_SIZE;

void main(){
  // Output position of the vertex, in clip space : MVP * position
  vec3 position = vertexPosition_modelspace;

  position.x *= TILE_SIZE;
  position.z *= TILE_SIZE;
  position.y = vertexHeight;

  // position.x = ((int(position.x) + CLIPMAP_SIZE + 1 - buffer_top_left.x) % (CLIPMAP_SIZE + 1)) * TILE_SIZE;
  // position.z = ((int(position.z) + CLIPMAP_SIZE + 1 - buffer_top_left.z) % (CLIPMAP_SIZE + 1)) * TILE_SIZE;

  gl_Position = MVP * vec4(position, 1);
  
  // UV of the vertex. No special space for this one.
  UV = vertexUV; 

  vBC = vertexBarycentric;

  // float x = float((int(vertexPosition_modelspace.x) + CLIPMAP_SIZE + 1 - buffer_top_left.x) % (CLIPMAP_SIZE + 1)) / (CLIPMAP_SIZE + 1);
  // float z = float((int(vertexPosition_modelspace.z) + CLIPMAP_SIZE + 1 - buffer_top_left.z) % (CLIPMAP_SIZE + 1)) / (CLIPMAP_SIZE + 1);
  // color_magna = vec3(buffer_top_left.x, 0, 0);
  color_magna = vec3(1, 1, 1);
}
