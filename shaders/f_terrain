#version 330 core

in FragData {
  vec3 position;
  vec2 UV;
  vec3 normal_cameraspace;
  float visibility;
  vec3 position_cameraspace;
  vec3 barycentric;
} in_data;

// Output data
layout(location = 0) out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D GrassTextureSampler;
uniform sampler2D SandTextureSampler;
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform int PURE_TILE_SIZE;

void main(){
  // Material properties.
  vec3 diffuse_color;
  float weight = 0.01f;

  vec2 uv = (ivec2(in_data.UV) / PURE_TILE_SIZE) * PURE_TILE_SIZE;
  uv = (in_data.UV - uv) / PURE_TILE_SIZE;

  if (uv.x < weight || uv.y < weight){
  // if (any(lessThan(in_data.barycentric, vec3(weight)))){
    diffuse_color = vec3(0.0, 0.0, 0.0);
  } else{
    diffuse_color = vec3(0.5);
    // diffuse_color = in_data.barycentric;

    // // Grass.
    // diffuse_color = texture(GrassTextureSampler, in_data.UV).rgb;

    // // Sand.
    // float limit = 5000 * 0.5;
    // float height = float(clamp(in_data.position.y, 0, limit)) / limit;
    // diffuse_color = mix(texture(SandTextureSampler, in_data.UV).rgb, diffuse_color, height);
  }
  // diffuse_color = vec3(uv.x, uv.y, 0.0);

  // Light.
  vec3 ambient_color = vec3(0.5, 0.5, 0.5) * diffuse_color;
  
  vec3 light_color = vec3(1, 1, 1);
  float light_power = 1.0;

  vec4 light_direction = normalize(vec4(1, 1, 0, 0));
  vec3 light_cameraspace = (V * light_direction).xyz;

  // Normal.
  vec3 n = normalize(in_data.normal_cameraspace);
  vec3 l = normalize(light_cameraspace);
  float cos_theta = clamp(dot(n, l), 0, 1);
  color = ambient_color + diffuse_color * light_color * light_power * cos_theta;
}
