#version 330 core

in VertexData {
  vec3 position;
  vec2 UV;
  vec3 normal;
} in_data;

uniform mat4 V;
uniform sampler2D TwigTextureSampler;
uniform sampler2D TwigMaskTextureSampler;

// Output data
layout(location = 0) out vec4 out_color;

void main(){
  vec3 color = texture(TwigTextureSampler, in_data.UV).rgb;

  // Light.
  vec3 ambient_color = vec3(0.7) * color;
  
  vec3 light_color = vec3(1, 1, 1);
  float light_power = 1.0;

  vec4 light_direction = normalize(vec4(1, 1, 0, 0));
  vec3 light_cameraspace = (V * light_direction).xyz;

  // Normal.
  vec3 n = normalize(in_data.normal);
  vec3 l = normalize(light_cameraspace);
  float cos_theta = clamp(dot(n, l), 0, 1);
  color = ambient_color + 0.3 * color * light_color * light_power * cos_theta;

  float alpha = texture(TwigMaskTextureSampler, in_data.UV).r;
  out_color = vec4(color, alpha);
  if (alpha < 0.1) {
    gl_FragDepth = 1000000;
  } else {
    gl_FragDepth = gl_FragCoord.z;
  }
}
